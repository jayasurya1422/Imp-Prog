class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> s=new HashSet<>();
        List<List<Integer>> ar=new ArrayList<>();
        Arrays.sort(nums);
        int sum=0;
       for(int i=0;i<nums.length;i++){
           int l=i+1;
           int r=nums.length-1;
           while(l<r){
                sum=nums[i]+nums[l]+nums[r];
               if(sum==0){
                    s.add(Arrays.asList(nums[i],nums[l],nums[r]));
                    l++;
                    r--;
               }
               else if(sum<0){
                   l++;
               }
               else{
                   r--;
               }
           }
       }
       ar.addAll(s);
       return ar;
    }
}





Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
